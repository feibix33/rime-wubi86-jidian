# Rime schema settings
# encoding: utf-8

schema:
  schema_id: wubi86_jidian
  name: "极点五笔86"
  version: "1.0"
  icon: "wubi86_jidian.ico"           # string 方案图标，格式： .ico
  ascii_icon:                         # string
  author:
    - 创始人 王永民先生
  description: |
    五笔字形 86 极点极爽版，方案由 KyleBing 修改 - 2019年11月08日 10:26
  dependencies:
#    - pinyin_simp

switches:
  - name: extended_charset
    states: [ 通用, 扩展 ]
    reset: 1
  - name: ascii_mode
    reset: 0
    states: [ 中, 英 ]
  - name: zh_trad
    reset: 0    # 初始状态为 0: 简 -> 简 1: 简 -> 繁
    states: [ 简体, 繁体 ]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: ascii_punct
    states: [ 。，, ．， ]


engine:
  processors:
    - ascii_composer # 处理中英文切换
    - recognizer     # 与 matcher 搭配，处理指定规则的输入组合，如网址、反查等tags
    - key_binder     # 按键绑定定义，如重定义逗号、句号为候选翻页、开关快捷键等
    - speller        # 拼写处理器，接受字符输入
    - punctuator     # 句读处理器，将单个字符按键直接映射为标点符号或文字
    - selector       # 选字处理器，处理数字选字时的操作（也可以换成别的）、上下候选键、翻页键
    - navigator      # 处理光标移动
    - express_editor # 编辑器，处理空格、回车上屏、删除键
    # - fluid_editor   # 句子输入编辑器，用于以空格断词、回车上屏的【注音】、【语句流】等输入方案，替换 express_editor，打开后按退格键可直接对已输入的内容重新编辑
    # - chord_composer # 和弦作曲家或曰并击处理器，用于【宫保拼音】等多键并击的输入方案
  segmentors:
    - ascii_segmentor    # 标识英文段落（如在英文模式下）字母直接上屏
    - matcher            # 配合recognizer标识符合特定规则的段落，如网址、反查等，加上特定tag
    - abc_segmentor      # 标识常规的文字段落，加上abc这个tag
    - punct_segmentor    # 标识句子输入（键入标点符号用）加上punct这个tag
    - fallback_segmentor # 标识其他未标识段落
    # - affix_segmentor    # 用户自定义tag
  translators:
    # - echo_translator    # 没有其他候选字时，回显输入码（输入码可以Shift+Enter上屏 
    - punct_translator           # 配合 punct_segmentor 转换标点符号
    - reverse_lookup_translator  # 反查翻译器，用另一种编码方案查码
    # - script_translator   # 脚本翻译器，用于拼音、粤拼等基于音节表的输入方案 -- 此项可加载多个实例，后接@+翻译器名（如：pinyin、jyutping等）
    - table_translator           # 码表翻译器，用于五笔、仓颉等基于码表的输入方案，-- 此项可加载多个实例，后接@+翻译器名（如：cangjie、wubi等
    - lua_translator@*wubi86_jidian_date_translator # 日期、时间、星期
    - history_translator@repeat_last_input # 重复上一次输入，对应下面的 repeat_last_input
  filters:
  filters:
    - simplifier@tradition
#    - lua_filter@*wubi86_jidian_single_char_first_filter # 单字优先
#    - lua_filter@*wubi86_jidian_single_char_only # 纯单字



# 自动造词功能：参阅： https://github.com/KyleBing/rime-wubi86-jidian#6-%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E9%80%A0%E8%AF%8D

speller:
  max_code_length: 4                    # 四码上屏
  auto_select: true                     # 四码唯一时，自动上屏
  # auto_clear: max_length                # 空码时自动清空

translator:
  dictionary: wubi86_jidian             # 翻译器将调取此字典文件
  enable_charset_filter: true           # 开启字符集过滤
  enable_completion: true               # 是否显示编码未输入完整的词条

  enable_sentence: false                # 句子输入模式
  enable_user_dict: true               # 是否开启用户词典，记录动态字频和用户词频
  enable_encoder: false

  encode_commit_history: false          # 是否对已上屏词自动成词（仅 table_translator 有效）

  max_phrase_length: 2               # 自动生成词的最大长度
  user_dict: user                    # 用户词典名
  db_class: tabledb                  # 用户词典类型 (二进制/userdb, 人类语言/tabledb)
  # disable_user_dict_for_patterns:    # 不需要录入用户词典的编码
  #   - "^z.*$"                        # 禁止拼音反查调频
  #   - ^[a-y]{1,2}$                   # 禁止单码字调频
  preedit_format:                       # 上屏码自定义
#    - xform/.+//  
  comment_format:                    # 提示码自定义
    - xform/.+//                     # 当前默认不提示编码，消除所有候选词后的提示码



# 简入繁出 通过 OpenCC 支持 github地址：https://github.com/BYVoid/OpenCC
# 已集成在输入法程序中，在输入法程序目录的 opencc 目录下
# 输入法程序中使用 OpenCC 简转繁的过程是这样：
# 1. 先从简转繁体
# 2. 如果配置了台湾繁体，就会将上一步生成的繁体进一步处理
# 3. 根据这个文件：https://github.com/BYVoid/OpenCC/blob/master/data/dictionary/TWVariants.txt 把台湾与正常繁体不同的地方转成台湾版本的字，比如 “床”

tradition:
  #  opencc_config: s2t.json  # 简 -> 繁
  opencc_config: s2hk.json  # 繁 -> 香港
  #  opencc_config: t2s.json   # 繁 -> 简
  #  opencc_config: t2tw.json  # 繁 -> 台湾
  #  opencc_config: t2hk.json  # 繁 -> 香港
  #  opencc_config: s2tw.json  # 簡 -> 臺灣標準
  #  opencc_config: s2twp.json  # 簡 -> 臺灣片語
  option_name: zh_trad

reverse_lookup:
  dictionary: pinyin_simp  # 反查使用的拼音词库
  prefix: "z"              # 反查前缀，以它为起点
  suffix: "'"              # 反查后缀，以它为结点
  tips: [拼音]              # 反查时的提示信息

  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
punctuator:
  import_preset: default
  import_preset: symbols
# 开始快捷输入符号功能，前面留两个空格
# 对应需要将下面 recognizer -> patterns 下面的 punct 字段的注释去掉

key_binder:
  import_preset: default

recognizer:
  import_preset: default
  patterns:
    punct: "^/([0-9]+[a-z]*|[a-z]+)$" # 注意前方需要有4个空格，跟下面对齐
    reverse_lookup: "^z[a-z]*'?$" # 反查词条的正则

# 重复上一次输入
repeat_last_input:
  input: z
  size: 1
  initial_quality: 1
